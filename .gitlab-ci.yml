include:
  - project: "cyberslot-test-group/infra/KinD/pipeline-templates"
    file: "Auto-DevOps.gitlab-ci.yml"

stages:
  - test
  - build
  - helm-package
  - publish
  - pre-deploy
  - deploy

.run_tests:
  stage: test
  image: python:3.9-slim-buster
  ## image: python:3.12.0a3-slim-bullseye
  before_script:
    - apt update && apt install make
  script:
    - make test

.build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.9.1-debug
    entrypoint: [""]
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"
  ## -- If active, prevents the stage from implementation! -- ##
  ## rules:
  ##   - if: $CI_COMMIT_TAG
  ## --------------------------------------------- ##

### - Helm chart
package:
  stage: helm-package
  image: alpine/helm:3.10.2
  script:
    - cd kubernetes/deploy/helm
    - helm package webapp

publish:
  stage: publish
  image: curlimages/curl:latest
  script:
    - 'curl --request POST --user gitlab-ci-token:$CI_JOB_TOKEN --form "chart=@kubernetes/deploy//helm/webapp-1.0.0.tgz" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/api/stable/charts"'

### - RBAC (NOT CONFIGURED)
.rbac:
  stage: pre-deploy
  image:
    name: bitnami/kubectl:latest
    entrypoint: [""]
  script:
    - kubectl apply -f ${CI_PROJECT_DIR}/kubernetes/deploy/gitlab-runner-rbac.yaml

deploy:
  stage: deploy
  ### - Manifests
  # image:
  #   name: bitnami/kubectl:latest
  #   entrypoint: [""]
  # script:
  #   - kubectl config get-contexts
  #   - kubectl config use-context cyberslot/CI_CD-Crash-Course:k8s-agent-cicd
  ## - kubectl get pods
  # - kubectl create ns webapp
  # - kubectl create secret docker-registry gl-regcred -n webapp --docker-server=registry.gitlab.com --docker-username=cyberslot --docker-password=$DEPLOY_TOKEN
  # - kubectl apply -f ${CI_PROJECT_DIR}/kubernetes/deploy/manifests/webapp/aio.yaml
  ## In case when port 5000 is not explicitly expose on cluster (KinD) level (in kind-multinode.yaml), execute it on the host:
  # kubectl port-forward $(kubectl get po -n webapp|grep webapp|awk '{ print $1 }') -n webapp 5000:5000 &
  ## Removal
  # - kubectl delete -f ${CI_PROJECT_DIR}/kubernetes/deploy/manifests/webapp/aio.yaml
  # - kubectl delete secret gl-regcred -n webapp

  ### - Helm chart from Project Repo (NOT TESTED)
  # image: alpine/helm:3.10.2
  # script:
  #   - helm upgrade webapp ./kubernetes/deploy/helm/ --install --set-string image.tag=${CI_COMMIT_TAG} --namespace webapp --timeout 30m0s
  # rules:
  #   - if: $CI_COMMIT_BRANCH == 'main'
  #     when: always

  ### - Helm package (chart) from Package Registry
  image: alpine/helm:3.10.2
  script:
    - chmod 600 /builds/cyberslot/CI_CD-Crash-Course.tmp/KUBECONFIG
    - helm repo add --username $CI_REGISTRY_USER --password $CI_REGISTRY_PASSWORD ci_cd-crash-course "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/stable"
    - helm repo up ci_cd-crash-course
    - helm install webapp ci_cd-crash-course/webapp -n webapp --create-namespace --set imagePullSecret.registryURL="registry.gitlab.com" --set imagePullSecret.secretName="gl-regcred" --set imagePullSecret.username="cyberslot" --set imagePullSecret.password=$DEPLOY_TOKEN # --wait
  ## Remove release
  # - helm un -n webapp webapp
  ## ------ Debug section ------ ##
  # - helm ls -a
  # - helm ls --all-namespaces
  # - helm history webapp
  # - helm template --validate webapp -n webapp --dry-run ci_cd-crash-course/webapp
  ## --------------------------- ##
  # - helm upgrade -i webapp --namespace webapp --dry-run ci_cd-crash-course/webapp # Optional use --debug after upgrade (NOT TESTED)
  environment:
    name: staging
    url: http://127.0.0.1:5000
